{"componentChunkName":"component---src-templates-blog-single-js","path":"/blog/2017/creating-a-webvr-synth/","result":{"data":{"site":{"siteMetadata":{"title":"Hamza Massaoudi","author":"Hamza Massaoudi"}},"post":{"rawMarkdownBody":"\nWeb browsers are incredibly powerful today and have APIs for VR devices, 3D rendering, audio synthesis and MIDI I/O. On top of this, the Open Source community has built libraries to enhance these APIs and to help us get ideas out easier. I've been exploring Virtual Reality as a new medium for interacting and experiencing audio/visual art using WebVR. This tutorial will show you the basics of getting up and running with audio synthesis in WebVR.\n\n#### A-Frame\n\n[A-Frame](https://aframe.io) is a Virtual Reality framework for the web, built by the Mozilla VR Team. A-Frame handles the 3D and WebVR boilerplate required to get running across platforms including mobile, desktop, Vive, and Rift.\n\nWe will use A-Frame to create the VR scene and interface of our instrument.\n\n#### Tone.js\n\n[Tone.js](https://tonejs.github.io) is a WebAudio framework for creating interactive music in the browser. Tone's API is designed to be familiar to musicians, allowing control of note pitch & duration, timeline controls ( playback & bpm ), sequencing and audio routing. It also provides DSP modules to build your own synthesizers, effects, and complex control signals.\n\nWe'll use Tone to control the audio of our instrument, including the synthesizer, effects and routing.\n\n#### What we will be making\n\nWe’re going to keep it simple and create a sort of 'Hello World' of A-Frame + Tone.js. We'll make rings that will each play a note, triggered on cursor hover. We’ll create our own A-Frame component that will contain our Tone.js logic.\n\n## Getting Started\n\nTo start with, we’ll to set up a HTML page and import both A-Frame and Tone.js. Inside the body, we set up the A-Frame scene with a sky, camera and cursor.\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>WebVR Musical Instrument</title>\n  <!-- A-Frame CDN -->\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/aframe/0.5.0/aframe.min.js\" charset=\"utf-8\"></script>\n  <!-- Tone.js CDN -->\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/tone/0.10.0/Tone.min.js\" charset=\"utf-8\"></script>\n</head>\n\n<body>\n  <!-- A-Frame scene -->\n  <a-scene antialias=\"true\">\n    <!-- plain white background -->\n    <a-sky color=\"white\"></a-sky>\n    <!-- our scene's camera -->\n    <a-camera position=\"0 0 4\" user-height=\"0\" wasd-controls=\"enabled: false\">\n      <!-- cursor with fuse enabled, allowing us to detect when it hovers over an entity -->\n      <a-cursor fuse=\"true\"></a-cursor>\n    </a-camera>\n\n  </a-scene>\n</body>\n\n</html>\n```\n\nIf you view this in your browser, you should see a white screen with a cursor and the 'Enter VR' button.\n\n_A-Frame & Tone.js support modern browsers, but Chrome is recommended._\n\n## The Interface\n\nNow for the interface of our instrument, we create an `<a-ring />` and set it's radius, color and segments-theta ( smooths out the edge ). We'll wrap it in an empty entity and rotate it backwards on the X axis.\n\nThe `synth` attribute references our synth component, which we will get to shortly.\n\n```html\n<!-- We wrap our three rings in an entity and rotate it backwards on the X axis -->\n<a-entity id=\"interface\" rotation=\"-45 0 0\">\n  <!-- The entity that will play the note -->\n  <a-ring\n    synth=\"note: A4\"\n    radius-inner=\"0.2\"\n    radius-outer=\"0.6\"\n    color=\"#212121\"\n    segments-theta=\"64\"\n  ></a-ring>\n<a-entity>\n```\n\n#### Visual feedback\n\nNow we want the ring to react when the cursor hovers over it. There are more than a few ways to achieve this, but the simplest is to add an `<a-animation>` that will begin when we hover over the ring.\n\nInside the ring, we add an `<a-animation>` and set it's `begin` attribute to the `fusing` event. The animation will instantly set the ring's opacity to 0.5 and fade it back in over 500ms.\n\n```html\n<a-ring\n  synth=\"note: A4\"\n  radius-inner=\"0.2\"\n  radius-outer=\"0.6\"\n  color=\"#212121\"\n  segments-theta=\"64\"\n>\n  <!-- This animation will be triggered when the cursor starts 'fusing' ( hovering ) -->\n  <a-animation\n    begin=\"fusing\"\n    attribute=\"opacity\"\n    dur=\"500\"\n    from=\"0.5\"\n    to=\"1\"\n  ></a-animation>\n</a-ring>\n```\n\n## The Synthesizer\n\nOur synth is going to be a custom A-Frame component. This will live in a `synth-component.js` that we will reference in our document `<head>` underneath our external libraries.\n\n```html\n<head>\n  <meta charset=\"utf-8\">\n  <title>WebVR Musical Instrument</title>\n  <!-- A-Frame CDN -->\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/aframe/0.5.0/aframe.min.js\" charset=\"utf-8\"></script>\n  <!-- Tone.js CDN -->\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/tone/0.10.0/Tone.min.js\" charset=\"utf-8\"></script>\n  <!-- Our Synth Component -->\n  <script src=\"synth-component.js\" charset=\"utf-8\"></script>\n</head>\n```\n\nIn `synth-component.js`, we will create a Tone.js Synth. We route the signal of the synth's output to master.\n\n```js\n// The synth\nconst synth = new Tone.Synth({\n  volume: -12, // the oscillator volume set to -12dB\n  oscillator: {\n    type: 'square', // oscillator type to square wave\n  },\n  envelope: {\n    attack: 0.02, // envelope attack set to 20ms\n    release: 1, // envelope release set to 1s\n  },\n}).toMaster() // connect the synth's output to the filter\n\n// tell the synth to play a the note C3 for the duration of an eight note\nsynth.triggerAttackRelease('C3', '8n')\n```\n\nIn your browser, the note should play on load.\n\n#### Connecting to A-Frame\n\nNow to tie it in to A-Frame, we will create an A-Frame component using `AFRAME.registerComponent()`. We attach a component to an entity and pass arguments using the component name as an attribute e.g. `<a-ring synth=\"note: A4\" />`. Find more about components in the [A-Frame docs](https://aframe.io/docs/0.5.0/core/component.html).\n\nOur synth component takes 2 arguments, note and duration. It triggers a synth note when the `fusing` event is activated.\n\n```js\n// Our customer synth component\nAFRAME.registerComponent('synth', {\n  // The schema defines arguments accepted by this component\n  schema: {\n    // The note / octave\n    note: {\n      type: 'string',\n      default: 'C4',\n    },\n    // The duration: 8n describes an eighth note\n    duration: {\n      type: 'string',\n      default: '8n',\n    },\n  },\n  init: function() {\n    // setup the fusing/hover event listener\n    // this.el refers to the entity\n    this.el.addEventListener('fusing', this.trigger.bind(this))\n  },\n  trigger: function() {\n    // trigger a note on the synth\n    // this.data refers to the arguments defined\n    synth.triggerAttackRelease(this.data.note, this.data.duration)\n  },\n  update: function() {},\n  tick: function() {},\n  remove: function() {},\n  pause: function() {},\n  play: function() {},\n})\n```\n\nNow our ring entity will play a note when the cursor hovers over. Try changing the note or duration: `<a-ring synth=\"note: A4; duration: 1n\" />` (_1n_ is a whole note).\n\n#### Adding effects\n\nTone.js comes with [heaps](https://tonejs.github.io/docs/) of built-in audio effects. Let's route the synth through a lowpass filter and send it to a delay effect.\n\n```js\n// a FeedbackDelay effect, repeating every eighth note with 80% feedback\nconst delay = new Tone.FeedbackDelay('8n', 0.8)\n  // chained into a Volume set to -12dB then to the Master output\n  .chain(new Tone.Volume(-12), Tone.Master)\n\n// a lowpass Filter with a frequency of 1500 Hz\nconst filter = new Tone.Filter(1500, 'lowpass')\n  // the signal is sent to the Delay as well as Master\n  .connect(delay)\n  .toMaster()\n\n// The synth\nconst synth = new Tone.Synth({\n  volume: -12, // the oscillator volume set to -12dB\n  oscillator: {\n    type: 'square', // oscillator type to square wave\n  },\n  envelope: {\n    attack: 0.02, // envelope attack set to 20ms\n    release: 1, // envelope release set to 1s\n  },\n}).connect(filter) // connect the synth's output to the filter\n```\n\nTake note of the routing changes. The `synth` is no longer connected directly to the master output. Instead, we connect it to `filter` using `connect(filter)`. The output of `filter` is sent to `delay` as well as the master output. We reduce the volume of `delay` by chaining it through a `Tone.Volume`, then to the master output.\n\n## Adding more rings\n\nLet's add more rings to our instrument. Inside our `#interface` entity, we'll add 2 more rings, each will have a larger radius and note. We'll copy the same opacity animation as a child of each ring.\n\n```html\n<!-- Ring 2 -->\n<a-ring synth=\"note: E4\" radius-inner=\"0.8\" radius-outer=\"1.2\" color=\"#212121\" segments-theta=\"64\">\n  <a-animation begin=\"fusing\" attribute=\"opacity\" dur=\"500\" from=\"0.5\" to=\"1\"></a-animation>\n</a-ring>\n\n<!-- Ring 3 -->\n<a-ring synth=\"note: F3\" radius-inner=\"1.4\" radius-outer=\"1.8\" color=\"#212121\" segments-theta=\"64\">\n  <a-animation begin=\"fusing\" attribute=\"opacity\" dur=\"500\" from=\"0.5\" to=\"1\"></a-animation>\n</a-ring>\n```\n\n## Viewing in a VR Headset\n\nIf you are lucky enough to have access to a VR headset, check out [webvr.info](https://webvr.info) to make get your browser setup to work with the headset. I've tested this example in Chromium & Firefox Nightly with an Oculus Rift on Windows 10. Chromium reproduced it as expected, Firefox didn't seem to reproduce the opacity effect.\n\nVR support in browsers is experimental at the time of writing, so you will probably run into inconsistencies across browsers and devices.\n\n## What's next?\n\nAs it is, this instrument is basic. It can only play 3 notes, has a delay effect, has no dynamic control and can only be interacted with the cursor. There are hundreds of interactive possibilities with VR, including touch/push, controller buttons, head position/rotation, hand position/rotation and microphone input. Then there are endless combinations of audio synthesis sound sources, effects, notes and rhythmic ideas. I hope this tutorial gets you started exploring and creating your own musical instruments in VR.\n","fields":{"slug":"/blog/2017/creating-a-webvr-synth/","editLink":"https://github.com/Jinksi/ericjinks.com/edit/master/src/pages/blog/2017/creating-a-webvr-synth.md"},"frontmatter":{"title":"Creating a WebVR musical instrument using A-Frame & Tone.js","date":"May 15, 2017","excerpt":"Audio synthesis in WebVR","cardimage":null}}},"pageContext":{"slug":"/blog/2017/creating-a-webvr-synth/","previous":null,"next":{"fields":{"slug":"/blog/2017/creating-static-websites-with-react-part-1/"},"frontmatter":{"title":"Creating static websites with React, Part 1"}}}}}