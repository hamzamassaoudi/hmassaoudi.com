{"componentChunkName":"component---src-templates-blog-single-js","path":"/blog/2017/creating-static-websites-with-react-part-1/","result":{"data":{"site":{"siteMetadata":{"title":"Hamza Massaoudi","author":"Hamza Massaoudi"}},"post":{"rawMarkdownBody":"\n_Why static?_  \nCreating a static website will offer improved performance, higher security, lower\ncost of hosting & scaling, and a better developer experience.\n\n_Why React?_  \nYou may have looked at a couple of [static site generators](https://www.staticgen.com/)\nand become a victim of [overchoice](https://en.wikipedia.org/wiki/Overchoice). You already know or wish to learn\nJavaScript and use it rather than a new templating language.\n\nI'll show you the basics of how I create a static website using React.\n\n## What will we be creating?\n\nWe are going to create a basic site that is lightning-fast, works offline, works\nwithout JavaScript and can be deployed on a CDN. It can be used as a framework\nfor future projects, kinda like a static-site generator. We'll be using\nopen-source React components/libraries to get us there.\n\nSee the result at: <https://react-static-site.netlify.com>.  \nIf you want to see the resulting code, [check out the Github repo](https://github.com/Jinksi/react-static-site).  \nI also have a more complete, opinionated framework which I use called\n[HyperStatic](https://github.com/Jinksi/hyperstatic)\n\n## What we will use to achieve this\n\n- [Create-React-App](https://github.com/facebookincubator/create-react-app)\n\n  This is a great start for any React project, allowing us to get stuck into\n  writing code quickly, without having to install or configure build tools.\n\n- [Styled Components](https://www.styled-components.com/)\n\n  I highly recommend using this CSS-in-JS solution for React. Allows us to write\n  our CSS in our React components using Sass-style syntax.\n\n- [React-Router](https://github.com/ReactTraining/react-router)\n\n  We'll use this to create our routes, enabling site navigation with urls, like\n  a normal website ðŸ˜….\n\n- [React-Helmet](https://github.com/nfl/react-helmet)\n\n  A simple way of updating our sites `<head>`. Think `<title>` and meta tags.\n\n- [React-Snapshot](https://github.com/geelen/react-snapshot)\n\n  To pre-render our app out to static html, allowing JavaScript-less support and\n  making our site feel extra speedy. This is our version of a static-site\n  generator.\n\n## Walkthrough\n\n### Pre-requisites\n\nYou need to have Node >= 6 installed on your machine.\n\n### Create-react-app\n\nIf you don't already have it, install\n[`create-react-app`](https://github.com/facebookincubator/create-react-app)\nglobally with npm.\n\n```\nnpm install -g create-react-app\n```\n\nOnce this has finished installing, we'll create our new project into a folder\ncalled `react-static-site`.\n\n```\ncreate-react-app react-static-site\ncd react-static-site\nnpm start\n```\n\nOur app is now running in development mode and we can see it in our browser at\n[localhost:3000](http://localhost:3000).\n\nOpen the project folder in your favourite editor. Have a look in the `src`\nfolder. `App.js` is the base component of our app. Let's delete the files\n`src/logo.svg` and `src/App.css`. Then we will remove the imports from the top\nof `App.js` and replace the markup in the `render` function:\n\n```jsx\n// src/App.js\nimport React, { Component } from 'react'\n\nclass App extends Component {\n  render() {\n    return <div>Hello World!</div>\n  }\n}\n\nexport default App\n```\n\nCool! We have a blank slate, let's create our home page.\n\n### Creating a page\n\nLet's create a new folder to keep our page templates: `src/views/`. In this\nfolder, create `Home.js`.\n\n```jsx\n// src/views/Home.js\nimport React from 'react'\nimport PageHeader from '../components/PageHeader'\n\nconst Home = props => (\n  <div>\n    <PageHeader>\n      <h1>Home Page</h1>\n    </PageHeader>\n    <p>This site is built with React!</p>\n  </div>\n)\n\nexport default Home\n```\n\nThis is a simple functional react component that returns markup for our home\npage. Let's import this into `src/App.js` and render it.\n\n```jsx\n// src/App.js\nimport React, { Component } from 'react'\nimport Home from './views/Home'\n\nclass App extends Component {\n  render() {\n    return <Home />\n  }\n}\n\nexport default App\n```\n\n### Adding style with styled-components\n\nOpen your project folder in terminal and install `styled-components`.\n\n`npm install styled-components`\n\nLet's create a new folder, `src/components/`, which will hold our styled\ncomponents. In this folder, we'll create our first component file,\n`PageHeader.js`.\n\n```jsx\n// src/components/PageHeader.js\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst Header = styled.div`\n  background: linear-gradient(45deg, aquamarine, aqua);\n  padding: 1rem 2rem;\n`\n\nconst Title = styled.h1`\n  font-weight: 300;\n`\n\nconst PageHeader = props => (\n  <Header>\n    <Title>{props.title}</Title>\n  </Header>\n)\n\nexport default PageHeader\n```\n\nAs you can see, we are writing css inside our component file. The `Header`\nstyled-component will return a `div` with it's respective css applied to it.\n`Title` will return a `h1` element with it's own css. The `PageHeader` component\nwill take a `title` prop and render our `Title` component nested inside\n`Header`.\n\nLet's import our `PageHeader` component into our home page:\n\n```jsx\n// src/views/Home.js\nimport React from 'react'\nimport PageHeader from '../components/PageHeader'\n\nconst Home = props => (\n  <div>\n    <PageHeader title=\"Home Page\" />\n    <p>This site is built with React!</p>\n  </div>\n)\n\nexport default Home\n```\n\nWe now see our `<PageHeader />` rendered on our home page!\n\n![PageHeader](/images/uploads/PageHeader.png)\n\nLet's add another component to hold the page content,\n`src/components/PageContent.js`:\n\n```jsx\n// src/components/PageContent.js\nimport styled from 'styled-components'\n\nconst PageContent = styled.div`\n  width: 95%;\n  max-width: 600px;\n  padding: 2rem;\n`\n\nexport default PageContent\n```\n\nNow we'll add it to the home page like we did with `<PageHeader />`, adding some\nplaceholder content:\n\n```jsx\n// src/views/Home.js\nimport React from 'react'\nimport PageHeader from '../components/PageHeader'\nimport PageContent from '../components/PageContent'\n\nconst Home = props => (\n  <div>\n    <PageHeader title=\"Home Page\" />\n    <PageContent>\n      <p>This site is built with React!</p>\n      <p>\n        This is placeholder text that our web designers put here to make sure\n        words appear properly on your website. This text is going to be replaced\n        once the website is completed. You are currently reading text that is\n        written in English, not any other language. Be careful not to waste too\n        much time reading placeholder text! This text isnâ€™t going to remain here\n        because it doesn't pertain to the website.\n      </p>\n    </PageContent>\n  </div>\n)\n\nexport default Home\n```\n\nAwesome, our home page is starting to look the part with our styled components.\nLet's look at adding navigating to our site. Firstly, we will create a new page,\n`src/views/About.js`:\n\n```jsx\n// src/views/About.js\nimport React from 'react'\nimport PageHeader from '../components/PageHeader'\nimport PageContent from '../components/PageContent'\n\nconst About = props => (\n  <div>\n    <PageHeader title=\"About Page\" />\n    <PageContent>\n      <p>Welcome to the About Page!</p>\n      <img\n        src=\"https://source.unsplash.com/xotmnyN3gdc/200x200\"\n        alt=\"Photo by Isabella JuskovÃ¡\"\n      />\n    </PageContent>\n  </div>\n)\n\nexport default About\n```\n\n### Navigating with react-router\n\nIt's time to install `react-router-dom`.\n\n`npm install react-router-dom`\n\nLet's open up `src/App.js` and we'll import the required components, then add\nour routes.\n\n```jsx\n// src/App.js\nimport React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport Home from './views/Home'\nimport About from './views/About'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about/\" component={About} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n```\n\nNow if you open <http://localhost:3000/about/> in your browser, you will see the\nabout page! ðŸŽ‰\n\nOK, let's now a new component for our navigation, `src/components/Nav.js`\n\n```jsx\n// src/components/Nav.js\nimport React from 'react'\nimport styled from 'styled-components'\nimport { NavLink } from 'react-router-dom'\n\nconst Nav = styled.nav`\n  display: flex;\n  padding: 2rem;\n\n  a {\n    margin-right: 1rem;\n    text-decoration: none;\n    text-transform: uppercase;\n    letter-spacing: 0.1em;\n    color: inherit;\n\n    &:hover,\n    &.active {\n      text-decoration: underline;\n    }\n  }\n`\n\nexport default props => (\n  <Nav>\n    <NavLink exact to=\"/\">\n      Home\n    </NavLink>\n    <NavLink to=\"/about/\">About</NavLink>\n  </Nav>\n)\n```\n\nAs you can see, styled-components allows us to write css with sass-style\nnesting. The `<NavLink />` component will add the `.active` className, allowing\nus to add an active style.\n\nNow let's add our new `<Nav />` component to `src/App.js`.\n\n```jsx\n// src/App.js\nimport React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport Home from './views/Home'\nimport About from './views/About'\nimport Nav from './components/Nav'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Nav />\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n```\n\nOur site now has navigation and routes! ðŸŽ‰\n\n![React Router](/images/uploads/react-router.gif)\n\nNow we need to update the document `<head>` when our routes change. For this\njob, we use react-helmet.\n\n### Managing the document head with react-helmet\n\nInstall `react-helmet`.\n\n`npm install react-helmet`\n\nReact-helmet will take any html tags and update the `<head>` for us. We will\nupdate the page `<title>` for our pages. Let's add `react-helmet` and a\n`<title>` to a `src/views/Home.js`:\n\n```jsx\n// app/views/Home.js\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\nimport PageHeader from '../components/PageHeader'\nimport PageContent from '../components/PageContent'\n\nconst Home = props => (\n  <div>\n    <Helmet>\n      <title>This is the Home Page title!</title>\n    </Helmet>\n    <PageHeader title=\"Home Page\" />\n    <PageContent>\n      <p>This site is built with React!</p>\n      <p>\n        This is placeholder text that our web designers put here to make sure\n        words appear properly on your website. This text is going to be replaced\n        once the website is completed. You are currently reading text that is\n        written in English, not any other language. Be careful not to waste too\n        much time reading placeholder text! This text isnâ€™t going to remain here\n        because it doesn't pertain to the website.\n      </p>\n    </PageContent>\n  </div>\n)\n\nexport default Home\n```\n\nGo ahead and do the same for `src/views/About.js`, with a unique `<title>`.\n\n![react-helmet](/images/uploads/react-helmet.gif)\n\nOk, we are nearly there, time to render this whole thing out to static html!\n\n### Rendering to html using react-snapshot\n\nLet's install `react-snapshot`.\n\n`npm install react-snapshot`\n\nTo begin, let's build out our site: `npm run build`. Once the build process has\ncompleted, take a look inside the `build` folder. Unfortunately, we only have\none `index.html` file. We need more! We need one for each page! Also, we need\nthe `<title>` and html content of the page to output to these html files!\n\nReact-snapshot will crawl all of the links that it finds in our app, rendering\nand saving html files as it goes. We only need to make a couple of changes to\nour code for this to happen:\n\n1.  `src/index.js`:\n\n```jsx\nimport React from 'react'\n// replace ReactDOM import with the following line:\nimport { render } from 'react-snapshot'\nimport './index.css'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\n// replace ReactDOM render with react-snapshot render\nrender(<App />, document.getElementById('root'))\nregisterServiceWorker()\n```\n\n2.  `package.json`:\n\nChange `build` script to `\"react-scripts build && react-snapshot\"`\n\n3.  `public/index.html`\n\nRemove the following `<noscript>` message:\n\n```html\n<noscript>\n  You need to enable JavaScript to run this app.\n</noscript>\n```\n\nThat's it! Let's `npm run build` again then have a look inside the `build`\nfolder. We now have html files for each of our pages, complete with `<title>`\ntags, content and css injected by our styled-components.\n\nWe can now upload this build folder to a CDN service like\n[Netlify](https://netlify.com). Better yet, publish your project to Github, link\nit with Netlify, which will run your build script and publish it when you update\nthe repo!\n\n### What's next?\n\nSee the result at: <https://react-static-site.netlify.com>.\n\nClick the button below to clone my example Github repo and deploy it\nautomagically on [Netlify](https://netlify.com). âœ¨\n\n[![Deploy to Netlify](https://www.netlify.com/img/deploy/button.svg)](https://app.netlify.com/start/deploy?repository=https://github.com/Jinksi/react-static-site)\n\nCheck back soon, I will be demonstrating how we can use a headless CMS to manage\ncontent for our static site.\n","fields":{"slug":"/blog/2017/creating-static-websites-with-react-part-1/","editLink":"https://github.com/Jinksi/ericjinks.com/edit/master/src/pages/blog/2017/creating-static-websites-with-react-part-1.md"},"frontmatter":{"title":"Creating static websites with React, Part 1","date":"October 09, 2017","excerpt":"Let's create a lightning-fast, offline-first static website with React","cardimage":null}}},"pageContext":{"slug":"/blog/2017/creating-static-websites-with-react-part-1/","previous":{"fields":{"slug":"/blog/2017/creating-a-webvr-synth/"},"frontmatter":{"title":"Creating a WebVR musical instrument using A-Frame & Tone.js"}},"next":{"fields":{"slug":"/blog/2019/netlify-scheduled-build/"},"frontmatter":{"title":"Schedule your Netlify build with GitHub Actions"}}}}}