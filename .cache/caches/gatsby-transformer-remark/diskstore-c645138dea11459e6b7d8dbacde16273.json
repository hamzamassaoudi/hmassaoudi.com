{"expireTime":9007200833853021000,"key":"transformer-remark-markdown-html-ast-f584a10ca42bd24551448d564c83ce22-gatsby-remark-copy-linked-filesgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-katexgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Anonymization of data became a very trendy topic in recent years. It had been widely adressed by the data community due to its growing importance to all companies collecting personal and sensitive information. ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":211,"offset":210}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":211,"offset":210}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"While structured data is standardized and relatively easy to anonymize, dealing with unstructured data is more tedious. There is no database schema that can be used to measure privacy risk. In this blog, I propose to use a named-entity recognition system (NER) to automatically detect textual confidential attributes such as identifiers, sensitive information, etc. In this case study, I will consider that these confidential information to be detected are disease names in medical diagnoses.","position":{"start":{"line":3,"column":1,"offset":212},"end":{"line":3,"column":493,"offset":704}}}],"position":{"start":{"line":3,"column":1,"offset":212},"end":{"line":3,"column":493,"offset":704}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Named-Entity Recognition","position":{"start":{"line":5,"column":3,"offset":708},"end":{"line":5,"column":27,"offset":732}}}],"position":{"start":{"line":5,"column":1,"offset":706},"end":{"line":5,"column":27,"offset":732}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Named-entity recognition (also known as entity identification) seeks to identify and classify words in an unstructured text into pre-defined categories.","position":{"start":{"line":7,"column":1,"offset":734},"end":{"line":7,"column":153,"offset":886}}}],"position":{"start":{"line":7,"column":1,"offset":734},"end":{"line":7,"column":153,"offset":886}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"NER is a very challenging learning problem. On the one hand, Supervised training data is very scarce. On the other, this task require language specific knowledge to construct efficient structured features.","position":{"start":{"line":9,"column":1,"offset":888},"end":{"line":9,"column":206,"offset":1093}}}],"position":{"start":{"line":9,"column":1,"offset":888},"end":{"line":9,"column":206,"offset":1093}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":" In our example, we are looking to anonymize medic al diagnoses reports by identifying disease names. Thus, our problem is equivalent to a binary classification of names.","position":{"start":{"line":11,"column":1,"offset":1095},"end":{"line":11,"column":171,"offset":1265}}}],"position":{"start":{"line":11,"column":1,"offset":1095},"end":{"line":11,"column":171,"offset":1265}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Example : ","position":{"start":{"line":13,"column":3,"offset":1269},"end":{"line":13,"column":13,"offset":1279}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Testicular cancer ** and **endometriosis","position":{"start":{"line":13,"column":15,"offset":1281},"end":{"line":13,"column":55,"offset":1321}}}],"position":{"start":{"line":13,"column":13,"offset":1279},"end":{"line":13,"column":57,"offset":1323}}},{"type":"text","value":"  have increased in incidence during the last decades .","position":{"start":{"line":13,"column":57,"offset":1323},"end":{"line":13,"column":112,"offset":1378}}}],"position":{"start":{"line":13,"column":3,"offset":1269},"end":{"line":13,"column":112,"offset":1378}}},{"type":"text","value":"\n"}],"position":{"start":{"line":13,"column":1,"offset":1267},"end":{"line":13,"column":112,"offset":1378}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Methodology","position":{"start":{"line":17,"column":3,"offset":1384},"end":{"line":17,"column":14,"offset":1395}}}],"position":{"start":{"line":17,"column":1,"offset":1382},"end":{"line":17,"column":14,"offset":1395}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/images/uploads/blog2020/methodo.png","alt":"method"},"children":[],"position":{"start":{"line":19,"column":1,"offset":1397},"end":{"line":19,"column":48,"offset":1444}}}],"position":{"start":{"line":19,"column":1,"offset":1397},"end":{"line":19,"column":48,"offset":1444}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a proof of concept, I will be focusing on locating disease names in medical reports using a model based on conditional random fields. ","position":{"start":{"line":21,"column":1,"offset":1446},"end":{"line":21,"column":138,"offset":1583}}}],"position":{"start":{"line":21,"column":1,"offset":1446},"end":{"line":21,"column":138,"offset":1583}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In practice, given a sentence, the model will tag each word with a ","position":{"start":{"line":23,"column":1,"offset":1585},"end":{"line":23,"column":68,"offset":1652}}},{"type":"raw","value":"<code class=\"language-text\">&quot;DISEASE&quot;</code>","position":{"start":{"line":23,"column":68,"offset":1652},"end":{"line":23,"column":80,"offset":1664}}},{"type":"text","value":"tag if it is a disease name and ","position":{"start":{"line":23,"column":80,"offset":1664},"end":{"line":23,"column":112,"offset":1696}}},{"type":"raw","value":"<code class=\"language-text\">&quot;O&quot;</code>","position":{"start":{"line":23,"column":112,"offset":1696},"end":{"line":23,"column":119,"offset":1703}}},{"type":"text","value":" otherwise,  which indicates that a token belongs to no chunk (outside).","position":{"start":{"line":23,"column":119,"offset":1703},"end":{"line":23,"column":191,"offset":1775}}}],"position":{"start":{"line":23,"column":1,"offset":1585},"end":{"line":23,"column":191,"offset":1775}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"First, we load the labeled data, which is a list of sentences and their corresponding labels","position":{"start":{"line":25,"column":4,"offset":1780},"end":{"line":25,"column":96,"offset":1872}}}],"position":{"start":{"line":25,"column":1,"offset":1777},"end":{"line":25,"column":96,"offset":1872}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The second step is the tokenizer, which splits sentences into tokens","position":{"start":{"line":26,"column":4,"offset":1876},"end":{"line":26,"column":72,"offset":1944}}}],"position":{"start":{"line":26,"column":1,"offset":1873},"end":{"line":26,"column":72,"offset":1944}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"In this step, we use a feature generator to extract reliable features with a window of 3 words (the current word, the previous and the next words)","position":{"start":{"line":27,"column":4,"offset":1948},"end":{"line":27,"column":150,"offset":2094}}}],"position":{"start":{"line":27,"column":1,"offset":1945},"end":{"line":27,"column":150,"offset":2094}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The final step uses a CRF to train an NER model.","position":{"start":{"line":28,"column":4,"offset":2098},"end":{"line":28,"column":52,"offset":2146}}}],"position":{"start":{"line":28,"column":1,"offset":2095},"end":{"line":28,"column":52,"offset":2146}}},{"type":"text","value":"\n"}],"position":{"start":{"line":25,"column":1,"offset":1777},"end":{"line":28,"column":52,"offset":2146}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Training Data","position":{"start":{"line":30,"column":3,"offset":2150},"end":{"line":30,"column":16,"offset":2163}}}],"position":{"start":{"line":30,"column":1,"offset":2148},"end":{"line":30,"column":16,"offset":2163}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In our experiments, we took advantage of medical texts that were labeled to study the semantic relationships between diseases and treatments. These ","position":{"start":{"line":32,"column":1,"offset":2165},"end":{"line":32,"column":149,"offset":2313}}},{"type":"element","tagName":"a","properties":{"href":"https://biotext.berkeley.edu/dis_treat_data.html"},"children":[{"type":"text","value":"files","position":{"start":{"line":32,"column":150,"offset":2314},"end":{"line":32,"column":155,"offset":2319}}}],"position":{"start":{"line":32,"column":149,"offset":2313},"end":{"line":32,"column":206,"offset":2370}}},{"type":"text","value":" were obtained from MEDLINE 2001 using the first 100 titles and the first 40 abstracts from the 59 files medline01n*.xml. These data contain 3,654 labeled sentences. The labels are: ‚ÄùDISONLY‚Äù, ‚ÄùTREATONLY‚Äù, ‚ÄùTREAT PREV‚Äù, ‚ÄùDIS PREV‚Äù, ‚ÄùTREAT SIDE EFF‚Äù, ‚ÄùDIS SIDE EFF‚Äù, ‚ÄùDIS VAG‚Äù, ‚ÄùTREAT VAG‚Äù, ‚ÄùTREAT NO‚Äù and‚ÄùDIS NO‚Äù. Because we were only interested in diseases, we only used the 629 sentences with the ‚ÄùDISONLY‚Äù label.","position":{"start":{"line":32,"column":206,"offset":2370},"end":{"line":32,"column":621,"offset":2785}}}],"position":{"start":{"line":32,"column":1,"offset":2165},"end":{"line":32,"column":621,"offset":2785}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After formatting and tokenizing raw text data, it looks like this :","position":{"start":{"line":34,"column":1,"offset":2787},"end":{"line":34,"column":68,"offset":2854}}}],"position":{"start":{"line":34,"column":1,"offset":2787},"end":{"line":34,"column":68,"offset":2854}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">from</span> spacy<span class=\"token punctuation\">.</span>tokenizer <span class=\"token keyword\">import</span> Tokenizer\n<span class=\"token keyword\">from</span> spacy<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>en <span class=\"token keyword\">import</span> English\nnlp <span class=\"token operator\">=</span> English<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Create a blank Tokenizer with just the English vocab</span>\ntokenizer <span class=\"token operator\">=</span> Tokenizer<span class=\"token punctuation\">(</span>nlp<span class=\"token punctuation\">.</span>vocab<span class=\"token punctuation\">)</span>\nfilepath <span class=\"token operator\">=</span> <span class=\"token string\">'data/sentences_with_roles_and_relations.txt'</span>\ndisease_data <span class=\"token operator\">=</span> read_text_labeled_sentences<span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> tokenizer<span class=\"token punctuation\">)</span>\nsample_data_point <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>disease_data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tokens:\\n {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>sample_data_point<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Labels:\\n {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>sample_data_point<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":36,"column":1,"offset":2856},"end":{"line":49,"column":4,"offset":3331}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Out:","position":{"start":{"line":51,"column":1,"offset":3333},"end":{"line":51,"column":5,"offset":3337}}}],"position":{"start":{"line":51,"column":1,"offset":3333},"end":{"line":51,"column":5,"offset":3337}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/images/uploads/blog2020/input_data.png","alt":"method"},"children":[],"position":{"start":{"line":53,"column":1,"offset":3339},"end":{"line":53,"column":51,"offset":3389}}}],"position":{"start":{"line":53,"column":1,"offset":3339},"end":{"line":53,"column":51,"offset":3389}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So basically, disease data is a list of tuples, each tuple (tokens, labels) represent a sentence divided to tokens and corresponding labels. Where 1 stands for disease name and 0 for other than disease name.","position":{"start":{"line":55,"column":1,"offset":3391},"end":{"line":55,"column":208,"offset":3598}}}],"position":{"start":{"line":55,"column":1,"offset":3391},"end":{"line":55,"column":208,"offset":3598}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The disease name in the example above  is ‚ÄúHead-neck carcinomas‚Äù. Thus, the last 2 labels are both equal to 1.","position":{"start":{"line":57,"column":1,"offset":3600},"end":{"line":57,"column":111,"offset":3710}}}],"position":{"start":{"line":57,"column":1,"offset":3600},"end":{"line":57,"column":111,"offset":3710}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Conditional Random Fields","position":{"start":{"line":59,"column":3,"offset":3714},"end":{"line":59,"column":28,"offset":3739}}}],"position":{"start":{"line":59,"column":1,"offset":3712},"end":{"line":59,"column":28,"offset":3739}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"CRFs have seen wide application in many areas, including natural language processing and computer vision. They are often used for structured prediction and tasks that require predicting variables that depend on each other as well as on observed variables.  ","position":{"start":{"line":61,"column":1,"offset":3741},"end":{"line":61,"column":258,"offset":3998}}}],"position":{"start":{"line":61,"column":1,"offset":3741},"end":{"line":61,"column":258,"offset":3998}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"CRFs models combine the ability of graphical models to compactly model the dependence between multivariate data and the ability of classification methods to predict outputs using large sets of input features. ","position":{"start":{"line":63,"column":1,"offset":4000},"end":{"line":63,"column":210,"offset":4209}}}],"position":{"start":{"line":63,"column":1,"offset":4000},"end":{"line":63,"column":210,"offset":4209}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"These models are considered to be the discriminative equivalents of the hidden Markov models. But first, let‚Äôs explain what is the difference between generative and discriminative models.","position":{"start":{"line":65,"column":1,"offset":4211},"end":{"line":65,"column":188,"offset":4398}}}],"position":{"start":{"line":65,"column":1,"offset":4211},"end":{"line":65,"column":188,"offset":4398}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Generative and Discriminative Models","position":{"start":{"line":67,"column":6,"offset":4405},"end":{"line":67,"column":42,"offset":4441}}}],"position":{"start":{"line":67,"column":1,"offset":4400},"end":{"line":67,"column":42,"offset":4441}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Generative models‚Äô approach might seem counterintuitive. They describe how a target vector y (in our case : it is the vector representing labels of each word in a sentence) can probabilistically ‚Äúgenerate‚Äù a feature vector x (words in our case). Discriminative models are more intuitive because they are working backwards, they describe how to assign a label y to a feature vector x.","position":{"start":{"line":69,"column":1,"offset":4443},"end":{"line":69,"column":384,"offset":4826}}}],"position":{"start":{"line":69,"column":1,"offset":4443},"end":{"line":69,"column":384,"offset":4826}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In principle, we can see that the approaches are distinct. They work in two opposite directions,  but theoretically, we can always convert between the two methods using Bayes rule.","position":{"start":{"line":71,"column":1,"offset":4828},"end":{"line":71,"column":181,"offset":5008}}}],"position":{"start":{"line":71,"column":1,"offset":4828},"end":{"line":71,"column":181,"offset":5008}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For example, in the naive Bayes model, it is easy to convert the joint probability ","position":{"start":{"line":73,"column":1,"offset":5010},"end":{"line":73,"column":84,"offset":5093}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"p(x,y) = p(y)p(x/y)","position":{"start":{"line":73,"column":86,"offset":5095},"end":{"line":73,"column":105,"offset":5114}}}],"position":{"start":{"line":73,"column":84,"offset":5093},"end":{"line":73,"column":107,"offset":5116}}},{"type":"text","value":" into a conditional distribution ","position":{"start":{"line":73,"column":107,"offset":5116},"end":{"line":73,"column":140,"offset":5149}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"p(y/x)","position":{"start":{"line":73,"column":142,"offset":5151},"end":{"line":73,"column":148,"offset":5157}}}],"position":{"start":{"line":73,"column":140,"offset":5149},"end":{"line":73,"column":150,"offset":5159}}},{"type":"text","value":". But in practice, we never have the exact true distribution to calculate the conditional distribution. We can end up with two different estimations of p(y/x). ","position":{"start":{"line":73,"column":150,"offset":5159},"end":{"line":73,"column":310,"offset":5319}}}],"position":{"start":{"line":73,"column":1,"offset":5010},"end":{"line":73,"column":310,"offset":5319}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To sum up, Generative and discriminative may have the same purpose which is calculating the conditional probability p(y/x), but they proceed in two different ways.","position":{"start":{"line":75,"column":1,"offset":5321},"end":{"line":75,"column":164,"offset":5484}}}],"position":{"start":{"line":75,"column":1,"offset":5321},"end":{"line":75,"column":164,"offset":5484}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The difference between generative models and CRFs is exactly analogous to the difference between the naive Bayes and logistic regression classifiers.","position":{"start":{"line":77,"column":3,"offset":5488},"end":{"line":77,"column":152,"offset":5637}}}],"position":{"start":{"line":77,"column":3,"offset":5488},"end":{"line":77,"column":152,"offset":5637}}},{"type":"text","value":"\n"}],"position":{"start":{"line":77,"column":1,"offset":5486},"end":{"line":77,"column":152,"offset":5637}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"CRFs methods can be seen as the discriminative analog of  generative Hidden Markov models. They can also be understood as a generalization of the logistic regression classifier to arbitrary graphical structures.","position":{"start":{"line":79,"column":1,"offset":5639},"end":{"line":79,"column":212,"offset":5850}}}],"position":{"start":{"line":79,"column":1,"offset":5639},"end":{"line":79,"column":212,"offset":5850}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since our named-entity recognition task rely on predicting a label of each word based on context and not only on word‚Äôs features. We will try CRFs methods, we will provide an implementations using ","position":{"start":{"line":81,"column":1,"offset":5852},"end":{"line":81,"column":198,"offset":6049}}},{"type":"element","tagName":"a","properties":{"href":"https://python-crfsuite.readthedocs.io/en/latest/"},"children":[{"type":"text","value":"pycrfsuite","position":{"start":{"line":81,"column":199,"offset":6050},"end":{"line":81,"column":209,"offset":6060}}}],"position":{"start":{"line":81,"column":198,"offset":6049},"end":{"line":81,"column":261,"offset":6112}}},{"type":"text","value":".","position":{"start":{"line":81,"column":261,"offset":6112},"end":{"line":81,"column":262,"offset":6113}}}],"position":{"start":{"line":81,"column":1,"offset":5852},"end":{"line":81,"column":262,"offset":6113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Implementation","position":{"start":{"line":83,"column":6,"offset":6120},"end":{"line":83,"column":20,"offset":6134}}}],"position":{"start":{"line":83,"column":1,"offset":6115},"end":{"line":83,"column":20,"offset":6134}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we explained the motivation behind using CRFs model for Named Entity recognition, let‚Äôs dive directly into code. We will see how to implement those methods on our dataset.","position":{"start":{"line":85,"column":1,"offset":6136},"end":{"line":85,"column":181,"offset":6316}}}],"position":{"start":{"line":85,"column":1,"offset":6136},"end":{"line":85,"column":181,"offset":6316}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First, we begin by calculating features for each word with a window of 3 words, which means that we also include features of next and previous words.","position":{"start":{"line":87,"column":1,"offset":6318},"end":{"line":87,"column":150,"offset":6467}}}],"position":{"start":{"line":87,"column":1,"offset":6318},"end":{"line":87,"column":150,"offset":6467}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here, we calculate features like : word parts, POS tags, word dependencies, lemma, shape (the shape of the word, example: ‚ÄúCRFs‚Äù -> ‚ÄúXXXx‚Äù), and other boolean variables like : isupper (check if characters are in uppercase), istitle (check if the first character is in uppercase), isdigit (check whether the word consists of digits only), is_stop (check whether the word is a stop word), etc.","position":{"start":{"line":89,"column":1,"offset":6469},"end":{"line":89,"column":392,"offset":6860}}}],"position":{"start":{"line":89,"column":1,"offset":6469},"end":{"line":89,"column":392,"offset":6860}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sklearn-crfsuite supports several input formats; here we use feature lists.","position":{"start":{"line":91,"column":1,"offset":6862},"end":{"line":91,"column":76,"offset":6937}}}],"position":{"start":{"line":91,"column":1,"offset":6862},"end":{"line":91,"column":76,"offset":6937}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The code below was adapted from the ","position":{"start":{"line":93,"column":1,"offset":6939},"end":{"line":93,"column":37,"offset":6975}}},{"type":"element","tagName":"a","properties":{"href":"https://sklearn-crfsuite.readthedocs.io/en/latest/tutorial.html"},"children":[{"type":"text","value":"official documentation","position":{"start":{"line":93,"column":38,"offset":6976},"end":{"line":93,"column":60,"offset":6998}}}],"position":{"start":{"line":93,"column":37,"offset":6975},"end":{"line":93,"column":126,"offset":7064}}}],"position":{"start":{"line":93,"column":1,"offset":6939},"end":{"line":93,"column":126,"offset":7064}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> pycrfsuite\n<span class=\"token keyword\">def</span> <span class=\"token function\">word2features</span><span class=\"token punctuation\">(</span>train_sample<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    token <span class=\"token operator\">=</span> train_sample<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    word <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span>text\n    features <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'bias'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'word.lower='</span> <span class=\"token operator\">+</span> word<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'word[-3:]='</span> <span class=\"token operator\">+</span> word<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'word[-2:]='</span> <span class=\"token operator\">+</span> word<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'word.isupper=%s'</span> <span class=\"token operator\">%</span> word<span class=\"token punctuation\">.</span>isupper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'word.istitle=%s'</span> <span class=\"token operator\">%</span> word<span class=\"token punctuation\">.</span>istitle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'word.isdigit=%s'</span> <span class=\"token operator\">%</span> word<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'word.pos='</span><span class=\"token operator\">+</span>token<span class=\"token punctuation\">.</span>pos_<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'word.dep='</span><span class=\"token operator\">+</span>token<span class=\"token punctuation\">.</span>dep_<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'word.is_stop=%s'</span> <span class=\"token operator\">%</span>token<span class=\"token punctuation\">.</span>is_stop<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'word.lemma='</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">.</span>lemma_<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'word.tag='</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">.</span>tag_<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'word.shape='</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">.</span>shape_<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'word.is_alpha=%s'</span> <span class=\"token operator\">%</span>token<span class=\"token punctuation\">.</span>is_alpha<span class=\"token punctuation\">,</span>        \n    <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        token1 <span class=\"token operator\">=</span> train_sample<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        word1 <span class=\"token operator\">=</span> token1<span class=\"token punctuation\">.</span>text\n        features<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'-1:word.lower='</span> <span class=\"token operator\">+</span> word1<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'-1:word.istitle=%s'</span> <span class=\"token operator\">%</span> word1<span class=\"token punctuation\">.</span>istitle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'-1:word.isupper=%s'</span> <span class=\"token operator\">%</span> word1<span class=\"token punctuation\">.</span>isupper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'-1:word.pos='</span><span class=\"token operator\">+</span>token1<span class=\"token punctuation\">.</span>pos_<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'-1:word.dep='</span><span class=\"token operator\">+</span>token1<span class=\"token punctuation\">.</span>dep_<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'-1:word.is_stop=%s'</span> <span class=\"token operator\">%</span>token1<span class=\"token punctuation\">.</span>is_stop<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'-1:word.lemma='</span> <span class=\"token operator\">+</span> token1<span class=\"token punctuation\">.</span>lemma_<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'-1:word.tag='</span> <span class=\"token operator\">+</span> token1<span class=\"token punctuation\">.</span>tag_<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'-1:word.shape='</span> <span class=\"token operator\">+</span> token1<span class=\"token punctuation\">.</span>shape_<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'-1:word.is_alpha=%s'</span> <span class=\"token operator\">%</span>token1<span class=\"token punctuation\">.</span>is_alpha<span class=\"token punctuation\">,</span>    \n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        features<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'BOS'</span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>train_sample<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        token1 <span class=\"token operator\">=</span> train_sample<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        word1 <span class=\"token operator\">=</span> token1<span class=\"token punctuation\">.</span>text\n        features<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'+1:word.lower='</span> <span class=\"token operator\">+</span> word1<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'+1:word.istitle=%s'</span> <span class=\"token operator\">%</span> word1<span class=\"token punctuation\">.</span>istitle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'+1:word.isupper=%s'</span> <span class=\"token operator\">%</span> word1<span class=\"token punctuation\">.</span>isupper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'+1:word.pos='</span><span class=\"token operator\">+</span>token1<span class=\"token punctuation\">.</span>pos_<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'+1:word.dep='</span><span class=\"token operator\">+</span>token1<span class=\"token punctuation\">.</span>dep_<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'+1:word.is_stop=%s'</span> <span class=\"token operator\">%</span>token1<span class=\"token punctuation\">.</span>is_stop<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'+1:word.lemma='</span> <span class=\"token operator\">+</span> token1<span class=\"token punctuation\">.</span>lemma_<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'+1:word.tag='</span> <span class=\"token operator\">+</span> token1<span class=\"token punctuation\">.</span>tag_<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'+1:word.shape='</span> <span class=\"token operator\">+</span> token1<span class=\"token punctuation\">.</span>shape_<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'+1:word.is_alpha=%s'</span> <span class=\"token operator\">%</span>token1<span class=\"token punctuation\">.</span>is_alpha<span class=\"token punctuation\">,</span>   \n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        features<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'EOS'</span><span class=\"token punctuation\">)</span>       \n    <span class=\"token keyword\">return</span> features\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sent2features</span><span class=\"token punctuation\">(</span>train_sample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>word2features<span class=\"token punctuation\">(</span>train_sample<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>train_sample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">encode_labels</span><span class=\"token punctuation\">(</span>labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"DISEASE\"</span> <span class=\"token keyword\">if</span> label<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"O\"</span> <span class=\"token keyword\">for</span> label <span class=\"token keyword\">in</span> labels<span class=\"token punctuation\">]</span></code></pre></div>","position":{"start":{"line":97,"column":1,"offset":7068},"end":{"line":161,"column":4,"offset":9251}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We use the encode_labels function to encode integer labels (0 or 1) to string labels (‚ÄúDISEASE‚Äù or ‚ÄúO‚Äù) to respect the target format needed by Sklearn-crfsuite.","position":{"start":{"line":163,"column":1,"offset":9253},"end":{"line":163,"column":161,"offset":9413}}}],"position":{"start":{"line":163,"column":1,"offset":9253},"end":{"line":163,"column":161,"offset":9413}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>disease_data<span class=\"token punctuation\">)</span>\ntraining_data <span class=\"token operator\">=</span> disease_data<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token operator\">*</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>disease_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\ntest_data <span class=\"token operator\">=</span> disease_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token operator\">*</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>disease_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#%%</span>\nX_train <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>sent2features<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> training_data<span class=\"token punctuation\">]</span>\ny_train <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>encode_labels<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> training_data<span class=\"token punctuation\">]</span>\n\nX_test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>sent2features<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> test_data<span class=\"token punctuation\">]</span>\ny_test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> test_data<span class=\"token punctuation\">]</span></code></pre></div>","position":{"start":{"line":165,"column":1,"offset":9415},"end":{"line":175,"column":4,"offset":9769}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Once we defined the training and the test sets, we can begin training the model","position":{"start":{"line":177,"column":1,"offset":9771},"end":{"line":177,"column":80,"offset":9850}}}],"position":{"start":{"line":177,"column":1,"offset":9771},"end":{"line":177,"column":80,"offset":9850}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">trainer <span class=\"token operator\">=</span> pycrfsuite<span class=\"token punctuation\">.</span>Trainer<span class=\"token punctuation\">(</span>verbose<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> xseq<span class=\"token punctuation\">,</span> yseq <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    trainer<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>xseq<span class=\"token punctuation\">,</span> yseq<span class=\"token punctuation\">)</span>\n\ntrainer<span class=\"token punctuation\">.</span>set_params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'c1'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.44</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># coefficient for L1 penalty</span>\n    <span class=\"token string\">'c2'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># coefficient for L2 penalty</span>\n    <span class=\"token string\">'max_iterations'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># stop earlier</span>\n\n    <span class=\"token comment\"># include transitions that are possible, but not observed</span>\n    <span class=\"token string\">'feature.possible_transitions'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Model's parameters : {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>trainer<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntrainer<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token string\">'models/crf_model.crfsuite'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Last iteration log {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>trainer<span class=\"token punctuation\">.</span>logparser<span class=\"token punctuation\">.</span>last_iteration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":179,"column":1,"offset":9852},"end":{"line":196,"column":4,"offset":10419}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Out:","position":{"start":{"line":198,"column":1,"offset":10421},"end":{"line":198,"column":5,"offset":10425}}}],"position":{"start":{"line":198,"column":1,"offset":10421},"end":{"line":198,"column":5,"offset":10425}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/images/uploads/blog2020/CRF_log.png","alt":"log"},"children":[],"position":{"start":{"line":200,"column":1,"offset":10427},"end":{"line":200,"column":45,"offset":10471}}}],"position":{"start":{"line":200,"column":1,"offset":10427},"end":{"line":200,"column":45,"offset":10471}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We begin by defining a trainer which is mainly our CRFs model, we then define some parameters like c1 and c2 (Coefficients used for regularization) and the max_iteration parameter (used to stop model‚Äôs iterations). After training, the model is automatically stored in the directory specified in the train function.","position":{"start":{"line":202,"column":1,"offset":10473},"end":{"line":202,"column":315,"offset":10787}}}],"position":{"start":{"line":202,"column":1,"offset":10473},"end":{"line":202,"column":315,"offset":10787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Results and conclusion","position":{"start":{"line":204,"column":3,"offset":10791},"end":{"line":204,"column":25,"offset":10813}}}],"position":{"start":{"line":204,"column":1,"offset":10789},"end":{"line":204,"column":26,"offset":10814}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After training the model let‚Äôs see how to calculate the labels for a given test example:","position":{"start":{"line":206,"column":1,"offset":10816},"end":{"line":206,"column":89,"offset":10904}}}],"position":{"start":{"line":206,"column":1,"offset":10816},"end":{"line":206,"column":89,"offset":10904}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">tagger <span class=\"token operator\">=</span> pycrfsuite<span class=\"token punctuation\">.</span>Tagger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntagger<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"models/crf_model.crfsuite\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sentence: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"predicted labels: {}\"</span><span class=\"token punctuation\">.</span> <span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>tagger<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"real labels {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>encode_labels<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":208,"column":1,"offset":10906},"end":{"line":216,"column":4,"offset":11155}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Out:","position":{"start":{"line":218,"column":1,"offset":11157},"end":{"line":218,"column":5,"offset":11161}}}],"position":{"start":{"line":218,"column":1,"offset":11157},"end":{"line":218,"column":5,"offset":11161}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/images/uploads/blog2020/output.png","alt":"output"},"children":[],"position":{"start":{"line":220,"column":1,"offset":11163},"end":{"line":220,"column":47,"offset":11209}}}],"position":{"start":{"line":220,"column":1,"offset":11163},"end":{"line":220,"column":47,"offset":11209}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As we can see, the model predict it right this time, but it may surely miss some disease names. Let‚Äôs measure the overall performance.","position":{"start":{"line":222,"column":1,"offset":11211},"end":{"line":222,"column":135,"offset":11345}}}],"position":{"start":{"line":222,"column":1,"offset":11211},"end":{"line":222,"column":135,"offset":11345}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">outputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    outputs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>tagger<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ntargets <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\noutputs <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\noutputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">if</span> output<span class=\"token operator\">==</span><span class=\"token string\">\"O\"</span> <span class=\"token keyword\">else</span> <span class=\"token number\">1</span> <span class=\"token keyword\">for</span> output <span class=\"token keyword\">in</span> outputs<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"conf_matrix: \\n\"</span><span class=\"token punctuation\">,</span> confusion_matrix<span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"precision score:\\n\"</span><span class=\"token punctuation\">,</span> precision_score<span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recall score:\\n\"</span><span class=\"token punctuation\">,</span> recall_score<span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F1 score:\\n\"</span><span class=\"token punctuation\">,</span> f1_score<span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":224,"column":1,"offset":11347},"end":{"line":237,"column":4,"offset":11787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Out:","position":{"start":{"line":239,"column":1,"offset":11789},"end":{"line":239,"column":5,"offset":11793}}}],"position":{"start":{"line":239,"column":1,"offset":11789},"end":{"line":239,"column":5,"offset":11793}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/images/uploads/blog2020/measure.png","alt":"measure"},"children":[],"position":{"start":{"line":241,"column":1,"offset":11795},"end":{"line":241,"column":49,"offset":11843}}}],"position":{"start":{"line":241,"column":1,"offset":11795},"end":{"line":241,"column":49,"offset":11843}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can see that the precision is much better than recall, which means that the number of false positives (Other names that are detected as disease names) is not that high. Still, there is a lot of disease names that are indetectable by the model. It might be explained by the size of training dataset.","position":{"start":{"line":243,"column":1,"offset":11845},"end":{"line":243,"column":302,"offset":12146}}}],"position":{"start":{"line":243,"column":1,"offset":11845},"end":{"line":243,"column":302,"offset":12146}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is worth mentioning that this model is very sensitive to features choice. I recommend the reader to delete or add features of his choice to test the model.","position":{"start":{"line":245,"column":1,"offset":12148},"end":{"line":245,"column":159,"offset":12306}}}],"position":{"start":{"line":245,"column":1,"offset":12148},"end":{"line":245,"column":159,"offset":12306}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is true that CRFs are well suited to named-entity recognition task, but other deep learning models have shown a better performance. ","position":{"start":{"line":247,"column":1,"offset":12308},"end":{"line":247,"column":136,"offset":12443}}}],"position":{"start":{"line":247,"column":1,"offset":12308},"end":{"line":247,"column":136,"offset":12443}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"RNNs architectures are known to be able to capture the dependence between input variables. LSTM deep learning models can be a good alternative to try. Some recent works also include  contextual embedding of words using attention. ","position":{"start":{"line":249,"column":1,"offset":12445},"end":{"line":249,"column":231,"offset":12675}}}],"position":{"start":{"line":249,"column":1,"offset":12445},"end":{"line":249,"column":231,"offset":12675}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":259,"column":2,"offset":12686}}}}