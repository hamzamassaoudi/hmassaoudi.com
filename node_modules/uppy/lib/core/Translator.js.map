{"version":3,"sources":["../../src/core/Translator.js"],"names":["module","exports","opts","defaultOptions","locale","strings","pluralize","n","interpolate","phrase","options","String","prototype","split","replace","dollarRegex","dollarBillsYall","interpolated","arg","hasOwnProperty","replacement","call","insertReplacement","RegExp","source","rx","newParts","forEach","chunk","raw","i","list","push","length","translate","key","translateArray","join","smart_count","plural"],"mappings":"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","file":"Translator.js","sourcesContent":["/**\n * Translates strings with interpolation & pluralization support.\n * Extensible with custom dictionaries and pluralization functions.\n *\n * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,\n * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded\n * and can be easily added among with dictionaries, nested objects are used for pluralization\n * as opposed to `||||` delimeter\n *\n * Usage example: `translator.translate('files_chosen', {smart_count: 3})`\n *\n * @param {object} opts\n */\nmodule.exports = class Translator {\n  constructor (opts) {\n    const defaultOptions = {\n      locale: {\n        strings: {},\n        pluralize: function (n) {\n          if (n === 1) {\n            return 0\n          }\n          return 1\n        }\n      }\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n    this.locale = Object.assign({}, defaultOptions.locale, opts.locale)\n  }\n\n  /**\n   * Takes a string with placeholder variables like `%{smart_count} file selected`\n   * and replaces it with values from options `{smart_count: 5}`\n   *\n   * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE\n   * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299\n   *\n   * @param {string} phrase that needs interpolation, with placeholders\n   * @param {object} options with values that will be used to replace placeholders\n   * @return {string} interpolated\n   */\n  interpolate (phrase, options) {\n    const { split, replace } = String.prototype\n    const dollarRegex = /\\$/g\n    const dollarBillsYall = '$$$$'\n    let interpolated = [phrase]\n\n    for (let arg in options) {\n      if (arg !== '_' && options.hasOwnProperty(arg)) {\n        // Ensure replacement value is escaped to prevent special $-prefixed\n        // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n        // be escaped with \"$\" itself, and we need two in the resulting output.\n        var replacement = options[arg]\n        if (typeof replacement === 'string') {\n          replacement = replace.call(options[arg], dollarRegex, dollarBillsYall)\n        }\n        // We create a new `RegExp` each time instead of using a more-efficient\n        // string replace so that the same argument can be replaced multiple times\n        // in the same phrase.\n        interpolated = insertReplacement(interpolated, new RegExp('%\\\\{' + arg + '\\\\}', 'g'), replacement)\n      }\n    }\n\n    return interpolated\n\n    function insertReplacement (source, rx, replacement) {\n      const newParts = []\n      source.forEach((chunk) => {\n        split.call(chunk, rx).forEach((raw, i, list) => {\n          if (raw !== '') {\n            newParts.push(raw)\n          }\n\n          // Interlace with the `replacement` value\n          if (i < list.length - 1) {\n            newParts.push(replacement)\n          }\n        })\n      })\n      return newParts\n    }\n  }\n\n  /**\n   * Public translate method\n   *\n   * @param {string} key\n   * @param {object} options with values that will be used later to replace placeholders in string\n   * @return {string} translated (and interpolated)\n   */\n  translate (key, options) {\n    return this.translateArray(key, options).join('')\n  }\n\n  /**\n   * Get a translation and return the translated and interpolated parts as an array.\n   * @param {string} key\n   * @param {object} options with values that will be used to replace placeholders\n   * @return {Array} The translated and interpolated parts, in order.\n   */\n  translateArray (key, options) {\n    if (options && typeof options.smart_count !== 'undefined') {\n      var plural = this.locale.pluralize(options.smart_count)\n      return this.interpolate(this.opts.locale.strings[key][plural], options)\n    }\n\n    return this.interpolate(this.opts.locale.strings[key], options)\n  }\n}\n"]}