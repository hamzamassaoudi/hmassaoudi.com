{"version":3,"sources":["../../../src/plugins/AwsS3/MultipartUploader.js"],"names":["MB","defaultOptions","limit","onStart","onProgress","onPartComplete","onSuccess","onError","err","remove","arr","el","i","indexOf","splice","MultipartUploader","file","options","key","uploadId","parts","isPaused","chunks","chunkState","uploading","_initChunks","chunkSize","Math","max","ceil","size","end","min","push","slice","map","uploaded","busy","done","_createUpload","resolve","then","createMultipartUpload","result","valid","TypeError","_uploadParts","catch","_onError","_resumeUpload","listParts","forEach","part","PartNumber","Size","etag","ETag","some","p","need","length","every","state","_completeUpload","candidates","index","_uploadPart","body","prepareUploadPart","number","url","_uploadPartBytes","_onPartProgress","sent","total","totalUploaded","reduce","n","c","_onPartComplete","xhr","XMLHttpRequest","open","responseType","upload","addEventListener","ev","lengthComputable","loaded","target","status","Error","getResponseHeader","error","source","send","sort","a","b","completeMultipartUpload","_abortUpload","abortMultipartUpload","start","pause","inProgress","abort","opts","really","module","exports"],"mappings":"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","file":"MultipartUploader.js","sourcesContent":["const MB = 1024 * 1024\n\nconst defaultOptions = {\n  limit: 1,\n  onStart () {},\n  onProgress () {},\n  onPartComplete () {},\n  onSuccess () {},\n  onError (err) {\n    throw err\n  }\n}\n\nfunction remove (arr, el) {\n  const i = arr.indexOf(el)\n  if (i !== -1) arr.splice(i, 1)\n}\n\nclass MultipartUploader {\n  constructor (file, options) {\n    this.options = Object.assign({}, defaultOptions, options)\n    this.file = file\n\n    this.key = this.options.key || null\n    this.uploadId = this.options.uploadId || null\n    this.parts = this.options.parts || []\n\n    this.isPaused = false\n    this.chunks = null\n    this.chunkState = null\n    this.uploading = []\n\n    this._initChunks()\n  }\n\n  _initChunks () {\n    const chunks = []\n    const chunkSize = Math.max(Math.ceil(this.file.size / 10000), 5 * MB)\n\n    for (let i = 0; i < this.file.size; i += chunkSize) {\n      const end = Math.min(this.file.size, i + chunkSize)\n      chunks.push(this.file.slice(i, end))\n    }\n\n    this.chunks = chunks\n    this.chunkState = chunks.map(() => ({\n      uploaded: 0,\n      busy: false,\n      done: false\n    }))\n  }\n\n  _createUpload () {\n    return Promise.resolve().then(() =>\n      this.options.createMultipartUpload()\n    ).then((result) => {\n      const valid = typeof result === 'object' && result &&\n        typeof result.uploadId === 'string' &&\n        typeof result.key === 'string'\n      if (!valid) {\n        throw new TypeError(`AwsS3/Multipart: Got incorrect result from 'createMultipartUpload()', expected an object '{ uploadId, key }'.`)\n      }\n      return result\n    }).then((result) => {\n      this.key = result.key\n      this.uploadId = result.uploadId\n\n      this.options.onStart(result)\n    }).then(() => {\n      this._uploadParts()\n    }).catch((err) => {\n      this._onError(err)\n    })\n  }\n\n  _resumeUpload () {\n    return Promise.resolve().then(() =>\n      this.options.listParts({\n        uploadId: this.uploadId,\n        key: this.key\n      })\n    ).then((parts) => {\n      parts.forEach((part) => {\n        const i = part.PartNumber - 1\n        this.chunkState[i] = {\n          uploaded: part.Size,\n          etag: part.ETag,\n          done: true\n        }\n\n        // Only add if we did not yet know about this part.\n        if (!this.parts.some((p) => p.PartNumber === part.PartNumber)) {\n          this.parts.push({\n            PartNumber: part.PartNumber,\n            ETag: part.ETag\n          })\n        }\n      })\n      this._uploadParts()\n    }).catch((err) => {\n      this._onError(err)\n    })\n  }\n\n  _uploadParts () {\n    if (this.isPaused) return\n\n    const need = this.options.limit - this.uploading.length\n    if (need === 0) return\n\n    // All parts are uploaded.\n    if (this.chunkState.every((state) => state.done)) {\n      this._completeUpload()\n      return\n    }\n\n    const candidates = []\n    for (let i = 0; i < this.chunkState.length; i++) {\n      const state = this.chunkState[i]\n      if (state.done || state.busy) continue\n\n      candidates.push(i)\n      if (candidates.length >= need) {\n        break\n      }\n    }\n\n    candidates.forEach((index) => {\n      this._uploadPart(index)\n    })\n  }\n\n  _uploadPart (index) {\n    const body = this.chunks[index]\n    this.chunkState[index].busy = true\n\n    return Promise.resolve().then(() =>\n      this.options.prepareUploadPart({\n        key: this.key,\n        uploadId: this.uploadId,\n        body,\n        number: index + 1\n      })\n    ).then((result) => {\n      const valid = typeof result === 'object' && result &&\n        typeof result.url === 'string'\n      if (!valid) {\n        throw new TypeError(`AwsS3/Multipart: Got incorrect result from 'prepareUploadPart()', expected an object '{ url }'.`)\n      }\n      return result\n    }).then(({ url }) => {\n      this._uploadPartBytes(index, url)\n    })\n  }\n\n  _onPartProgress (index, sent, total) {\n    this.chunkState[index].uploaded = sent\n\n    const totalUploaded = this.chunkState.reduce((n, c) => n + c.uploaded, 0)\n    this.options.onProgress(totalUploaded, this.file.size)\n  }\n\n  _onPartComplete (index, etag) {\n    this.chunkState[index].etag = etag\n    this.chunkState[index].done = true\n\n    const part = {\n      PartNumber: index + 1,\n      ETag: etag\n    }\n    this.parts.push(part)\n\n    this.options.onPartComplete(part)\n\n    this._uploadParts()\n  }\n\n  _uploadPartBytes (index, url) {\n    const body = this.chunks[index]\n    const xhr = new XMLHttpRequest()\n    xhr.open('PUT', url, true)\n    xhr.responseType = 'text'\n\n    this.uploading.push(xhr)\n\n    xhr.upload.addEventListener('progress', (ev) => {\n      if (!ev.lengthComputable) return\n\n      this._onPartProgress(index, ev.loaded, ev.total)\n    })\n\n    xhr.addEventListener('abort', (ev) => {\n      remove(this.uploading, ev.target)\n      this.chunkState[index].busy = false\n    })\n\n    xhr.addEventListener('load', (ev) => {\n      remove(this.uploading, ev.target)\n      this.chunkState[index].busy = false\n\n      if (ev.target.status < 200 || ev.target.status >= 300) {\n        this._onError(new Error('Non 2xx'))\n        return\n      }\n\n      this._onPartProgress(index, body.size, body.size)\n\n      // NOTE This must be allowed by CORS.\n      const etag = ev.target.getResponseHeader('ETag')\n      if (etag === null) {\n        this._onError(new Error('AwsS3/Multipart: Could not read the ETag header. This likely means CORS is not configured correctly on the S3 Bucket. Seee https://uppy.io/docs/aws-s3-multipart#S3-Bucket-Configuration for instructions.'))\n        return\n      }\n\n      this._onPartComplete(index, etag)\n    })\n\n    xhr.addEventListener('error', (ev) => {\n      remove(this.uploading, ev.target)\n      this.chunkState[index].busy = false\n\n      const error = new Error('Unknown error')\n      error.source = ev.target\n      this._onError(error)\n    })\n\n    xhr.send(body)\n  }\n\n  _completeUpload () {\n    // Parts may not have completed uploading in sorted order, if limit > 1.\n    this.parts.sort((a, b) => a.PartNumber - b.PartNumber)\n\n    return Promise.resolve().then(() =>\n      this.options.completeMultipartUpload({\n        key: this.key,\n        uploadId: this.uploadId,\n        parts: this.parts\n      })\n    ).then((result) => {\n      this.options.onSuccess(result)\n    }, (err) => {\n      this._onError(err)\n    })\n  }\n\n  _abortUpload () {\n    this.options.abortMultipartUpload({\n      key: this.key,\n      uploadId: this.uploadId\n    })\n  }\n\n  _onError (err) {\n    this.options.onError(err)\n  }\n\n  start () {\n    this.isPaused = false\n    if (this.uploadId) {\n      this._resumeUpload()\n    } else {\n      this._createUpload()\n    }\n  }\n\n  pause () {\n    const inProgress = this.uploading.slice()\n    inProgress.forEach((xhr) => {\n      xhr.abort()\n    })\n    this.isPaused = true\n  }\n\n  abort (opts = {}) {\n    const really = opts.really || false\n\n    if (!really) return this.pause()\n\n    this._abortUpload()\n  }\n}\n\nmodule.exports = MultipartUploader\n"]}