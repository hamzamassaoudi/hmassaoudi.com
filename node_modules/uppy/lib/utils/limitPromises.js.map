{"version":3,"sources":["../../src/utils/limitPromises.js"],"names":["module","exports","limitPromises","limit","pending","queue","fn","args","call","promise","then","onfinish","resolve","reject","push","next","shift"],"mappings":";;AAAA;;;;;;;;AAQAA,OAAOC,OAAP,GAAiB,SAASC,aAAT,CAAwBC,KAAxB,EAA+B;AAC9C,MAAIC,UAAU,CAAd;AACA,MAAMC,QAAQ,EAAd;AACA,SAAO,UAACC,EAAD,EAAQ;AACb,WAAO,YAAa;AAAA,wCAATC,IAAS;AAATA,YAAS;AAAA;;AAClB,UAAMC,OAAO,SAAPA,IAAO,GAAM;AACjBJ;AACA,YAAMK,UAAUH,oBAAMC,IAAN,CAAhB;AACAE,gBAAQC,IAAR,CAAaC,QAAb,EAAuBA,QAAvB;AACA,eAAOF,OAAP;AACD,OALD;;AAOA,UAAIL,WAAWD,KAAf,EAAsB;AACpB,eAAO,aAAY,UAACS,OAAD,EAAUC,MAAV,EAAqB;AACtCR,gBAAMS,IAAN,CAAW,YAAM;AACfN,mBAAOE,IAAP,CAAYE,OAAZ,EAAqBC,MAArB;AACD,WAFD;AAGD,SAJM,CAAP;AAKD;AACD,aAAOL,MAAP;AACD,KAhBD;AAiBD,GAlBD;AAmBA,WAASG,QAAT,GAAqB;AACnBP;AACA,QAAMW,OAAOV,MAAMW,KAAN,EAAb;AACA,QAAID,IAAJ,EAAUA;AACX;AACF,CA3BD","file":"limitPromises.js","sourcesContent":["/**\n * Limit the amount of simultaneously pending Promises.\n * Returns a function that, when passed a function `fn`,\n * will make sure that at most `limit` calls to `fn` are pending.\n *\n * @param {number} limit\n * @return {function()}\n */\nmodule.exports = function limitPromises (limit) {\n  let pending = 0\n  const queue = []\n  return (fn) => {\n    return (...args) => {\n      const call = () => {\n        pending++\n        const promise = fn(...args)\n        promise.then(onfinish, onfinish)\n        return promise\n      }\n\n      if (pending >= limit) {\n        return new Promise((resolve, reject) => {\n          queue.push(() => {\n            call().then(resolve, reject)\n          })\n        })\n      }\n      return call()\n    }\n  }\n  function onfinish () {\n    pending--\n    const next = queue.shift()\n    if (next) next()\n  }\n}\n"]}